

* Темы для курсовых работ

  Общие требования к оформлению курсовых работ указаны в нормативном документе Политеха (см. файл).

  Курсовая работа должна содержать:
  1. введение, в котором описывается предмет работы, постановка задачи, ее значимость, область применения;
  2. основную часть;
  3. заключение, в котором сделаны выводы и кратко подведены результаты работы;
  4. список литературы;
  5. приложение, содержащее разработанный программный код.

  Код должен быть акуратно написан, он должен быть легко читаем,
  1. самодокументирующийся код
  2. следование конвенциям оформления кода
     
  Недопускается в основной части (за исключением режима отладки)
  1. вывод в консоль
  2. досрочный выход из программы (бросайте исключения или возвращайте специальное значение из функции)


  Предлагается несколько направлений для курсовых работ.

  1. Алгоритмы и структуры данных -- фундаментальные алгоритмы и структуры данных,
     потребность в которых часто возникает при решении разнообразных задач.
     Их знание помогает разрабатывать быстрый, надежный и понятный код.
     + эффективно организовывать данные
     + использовать хорошо изученные алгоритмы
     + использовать идеи
     + понимать скорость выполнения кода
     + грамотно разбивать на подзадачи
     + узнаваемые структуры и алгоритмы для других программистов
     + ожидаемая скорость выполнения кода
     Хороший программист должен быть знаком со всеми алгоритмами и структурами данных
     из предложенного списка.

  2. Робототехника -- работа с железом имеет свою специфику.

  3. Библиотеки и фреймворки -- знакомство с библиотеками/фреймворками.

  4. Сеть -- написание программ использующих передачу данных через сеть.

  5. Многопоточность, реалтайм -- написание программ ориентированных на реалтайм.

  6. Ядро линукса -- написание модуля для ОС Линукс.
     

** Алгоритмы и структуры данных

   В тексте курсовой необходимо отметить область применения алгоритма,
   его сложность (по времени, по памяти), описать основную идею,
   сделать ссылки на литературу, где он описан, исследован (в идеале ссылку на первую публикацию).
   Статья на википедии не является научной публикацией, на нее ссылку сделать можно,
   но недостаточно, нужна ссылка на книгу и/или на статью.

   Код реализации поместить в приложение.

   Если вы реализуете структуру данных (например, Дерево Меркла), то необходимо в тексте
   курсовой указать основные операции с этой структурой (например, добавление, удаление элементов).

   Если вы реализуете алгоритм (например, сортировку), то в тексте необходимо
   описать входные данные.

   Реализованные алгоритмы необходимо экспериментально исследовать: сгенерировать
   данные разного размера и посмотреть, сколько времени будет работать алгоритм на них.
   Построить график.

   В заключении нужно написать выводы, например, когда и при каких объемах данных
   разумно применять этот алгоритм, в каких задачах.
   

   1. Сортировки: Bubble Sort, Heap Sort, Insertion Sort, Merge Sort, Quick Sort.

   2. Max heap, Fibonacci heap, binomial heap

   3. Дерево Фенвика (сумма, максимум, минимум)

   4. Дерево Меркла
      
   5. Алгоритм Ахо-Корасик

   6. Rabin-Karp алгоритм, Boyer-Moore-Horspool алгоритм

   7. Алгоритм Укконена

   8. Бинарное сортирующее дерево, splay-tree

   9. Red-Black Tree

   10. АВЛ Дерево

   11. B-Tree

   12. B+ Tree

   13. B* Tree

   14. R Tree

   15. Венгерский алгоритм

   16. Алгоритм Краскала, Алгоритм Прима

   17. Алгоритм Декстры, A*, Lee

   18. Bellman-Ford алгоритм, Floyd-Warshall алгоритм

   19. Обратная Польская запись (+, -, *, /, ^, (), унарный +, унарный -)

   20. Обход графа в глубину, в ширину, Топологическая сортировка (Kahn's algorithm)

   21. Построение выпуклой оболочки: алгоритм Jarvis, алгоритм Graham

   22. Алгоритм Tarjan для поиска сильно связанных компонент графа

   23. Алгоритм Kosaraju для поиска сильно связанных компонент графа

   24. Алгоритм Tarjan для поиска мостов в графе

   25. Bentley-Ottmann algorithm

   26. Структура данных: блокчейн (добавление блока, проверка корректности всей цепи), без PoW
      

** Робототехника

   Содержание курсовой:
   + постановка задачи
   + описание датчиков и локализации возможных проблем (если подключены не так),
     назване платформы (adriuno UNO), дополнительных библиотек для работы с датчиками
   + словестное описание алгоритма
   + описание алгоритмов реагирования на датчики
   + код должен иметь комментарии
   + железо работает нестабильно, код должен сигнализровать о возникающих пролемах и, при возможности, их решать.
     

   Варианты:
  
   1. Теплица. Написать программу поддержания микроклимата для роста растений
      (освещенность, температура, влажность, проветривание) для роста растений (варианты):
      + вешенки
      + кактусы
      + помидоры
      
   2. OmegaBot
      + движение по линии (важна скорость прохождения трассы, максимальные углы поворота)
      + движение в колонне, первая машина с водителем, остальные -- беспилотные следуют друг за другом в колонне
      + составление карты препятствий (варианты: ультрозвуковой датчик, камера)
      + объезд площади (робот-пылесос, анализ местности, ...)
      + движение в группе: поддержание формации (цепь, клин, ...) при движении
      + перемещение грузов из точки A, в точку B (устройство захвата)
      
   3. Манипулятор
      + Определение конфигурации манипулятора, выставление заданной конфигурации
      + Движение захвата по заданной траектории
      + Перемещение грузов из точки A, в точку B
      + Выборочное перемещение грузов (только красный)
      + Передача груза от одного манипулятора другому
      + Одновременное поднятие одного груза несколькими манипуляторами
      + Построение башни (установка предметов друг на друга), чем выше башня, тем лучше
        


** Библиотеки и фреймворки

   Разработать интерфейсы для управления роботами (подключать к роботу не нужно)
   + кнопки управления
   + кнопки для запуска сложных команд (запуск режимов работы)
   + данные от сенсоров
   + вывод данных
   + логирование команд и данных в файл


   1. QT
      + Теплица
      + ОмегаБот
      + Манипулятор
      
   2. NCurses
      + Теплица
      + ОмегаБот
      + Манипулятор


** Многопоточность

   Realtime системы, обмен данными между потоками.

   1. RealTime 


** Сеть

   Использовать стандратную библиотеку, делать через сокеты.

   1. Обмен сообщениями через сеть (чат на 2х человек)
   2. Написать приложение, к которому подключается несколько клиентов,
      получают данные, отдают данные, вывод всего в консоль


** Ядро Линукс

   1. Написать модуль для ядра Linux, который создаст char устройство в /dev такое, что
      при записи в него будет вызываться функция, которая эти данные будет писать в файл,
      а при чтении из него функция будет выдавать объем лог файла
